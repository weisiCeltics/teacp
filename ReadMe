TeaCP: a Toolkit for Evaluation and Analysis of Collection Protocols

1. About TeaCP

    TeaCP (pronounced as teacup) is a prototype Toolkit for the evaluation and
    analysis of Collection Protocols in both simulation and experimental
    environments running on TinyOS. The toolkit consists of a testing system,
    which runs a collection protocol of choice, and an optional SD card-based
    logging system, which stores the logs generated by the testing system. The
    SD card datalogger allows a wireless sensor network (WSN) to be
    deployed flexibly in various environments, especially where wired
    transfer of data is difficult. Using the saved logs, TeaCP evaluates a
    wide range of performance metrics, such as reliability, throughput,
    and delay. TeaCP further allows visualization of packet routes and
    the topology evolution of the network, under both static and
    dynamic conditions, even in the face of transient disconnections.


2. Using TeaCP in experiments

2.1 Configuring a test

    Configure the test parameters (packet generation interval, etc.) in the
    header file test_config.h under the directory exp/nesc/.

    After we have configured the parameters for a test, compile and install the
    TinyOS program onto the activator:

        $ cd exp/nesc/activator/
        $ make telosb bsl,/dev/ttyUSB0 install.50
   
2.2 Installing TeaCP application layer component

    Next compile the TeaCP application layer component and the collection
    protocol and install onto the nodes.

        $ cd exp/nesc/ctp
        $ make telosb
        $ make telosb bsl,/dev/ttyUSB0 reinstall.1

    The last command should be repeated to install the code onto the sensors
    with different node IDs (by specifying reinstall.[TOS_NODE_ID])

2.3 Attaching the data logging system

    We then attach the data logging system to each node and deploy the nodes in
    the testing environment. For the data logging system, you can either use our
    implemented SD card datalogger or connect each node to a PC through USB port
    for data logging. If you use the USB datalogging system, you need to run the
    serial listener to receive the serial messages from the sensors:

        $ java net.tinyos.tools.Listen -comm serial@/dev/ttyUSB0:telosb >
        node_1.log

    Here we save the received serial messages into the file with extension .log.
    This is intentional because our TeaCP analysis component identifies a file
    as a log file by looking at the file extension.

2.4 Starting and finishing a test

    Press the user button on the activator node to send out a broadcast signal
    and the experiment starts.

    When the experiment finishes, press the user button on the activator node
    for five more times and the activator will send out a broadcast signal to
    tell the sensors to reset. Then collect the log files from the dataloggers
    for post-experiment analysis. If you are using the USB logging system, you
    need to press CTRL+C on the keyboard to terminate the serial listener.


3. Using TeaCP in simulations

3.1 Configuring a test

    The same as experiments, we configure the packet generation interval in
    test_config.h under sim/nesc/. However, the configurations of radio power
    and radio channel in the header file are not applicable any more. Instead,
    the TOSSIM simulation uses a different way to configure the link conditions
    between nodes. TeaCP includes the configurations in the simulation script,
    e.g., static.py under the directory sim/test_scripts/:

        default_arg = {
            'protocol'         : 'ctp',
            'log_filename'     : 'log/temp/simulation.log',
            'noise_filename'   : 'noise-100dBm.txt',
            'link_filename'    : 'static/perfect-grid-25nodes.txt',
            'finish_time'      : 500,
            'link_gain_adjust' : 0
            }

    The file link_filename specifies the link gains between nodes in the
    network. The file noise_filename specifies the noise trace at each node.

3.2 Compiling TeaCP application layer component

    After we finish the configuration, compile the TeaCP application layer
    component:

        $ cd sim/nesc/ctp
        $ make micaz sim

    This compilation generates the Python code of the TOSSIM simulator,
    Tossim.py.

3.3 Running a test

    Before running the test, let me explain another two parameters in the
    configuration list. The parameter protocol denotes the collection protocol
    that the simulation runs on and is actually the folder name where the script
    can find the TOSSIM simulator (Tossim.py). By modifying the parameter
    finish_time, you can specify the total simulated duration of the test in
    units of seconds.

    Now we can run the simulation by:

        $ cd sim/test_scripts
        $ python static.py

    There are two simulation scripts under sim/test_scripts/: static.py and
    dynamic.py. The difference between these two scripts is that static.py runs
    simulations on static link gains while dynamic.py runs simulations on
    time-varying link gains. For more details, please take a look at the example
    traces under the directory sim/config/linkgain/.


4. Using the TeaCP analysis component

    The TeaCP analysis component is packaged in TeacpAnalysis.py. There is a
    script, run-analysis.py, under exp/tools/ and sim/tools/, respectively. This
    script is a simple example of using the TeaCP analysis component. Before
    running the script, you need to specify the directory where the log files
    are located. Then run the commands:
        
        $ cd sim/tools/
        $ python run-analysis.py


5. Running a collection of simulations

    Suppose you want to run a collection of simulations with a parameter set to
    a list of different values, you can run:

        $ cd sim/
        $ python run-simulation.py

    The script can also iterate simulations for the same set of parameters to
    obtain confidence intervals on the statistics.
